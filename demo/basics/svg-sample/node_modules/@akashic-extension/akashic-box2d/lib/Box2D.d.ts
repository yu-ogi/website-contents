import * as box2dweb from "box2dweb";
import { EBody, Box2DFixtureDef, Box2DBodyDef } from "./parameters";
/**
 * `Box2D` のインスタンス生成時に指定するパラメータ。
 */
export interface Box2DParameter {
    /**
     * 重力の方向 (m/s^2)。
     */
    gravity: number[];
    /**
     * スケール (pixel/m)。
     */
    scale: number;
    /**
     * 停止した物体を物理演算対象とするかどうか。
     * 省略時はtrue。
     */
    sleep?: boolean;
}
/**
 * AkashicのエンティティをBox2DWebのb2Worldに追加し、演算結果をエンティティに反映するクラス。
 */
export declare class Box2D {
    /**
     * `b2World` のインスタンス。
     */
    world: box2dweb.Dynamics.b2World;
    /**
     * このクラスが保持する `EBody` のリスト。
     */
    bodies: EBody[];
    /**
     * 物理世界のピクセルサイズとAkashicのピクセルサイズのスケール比。
     */
    scale: number;
    private _createBodyCount;
    private _matrix;
    /**
     * `Box2D` のインスタンスを生成する。
     * @param param `b2World` の生成オプション
     */
    constructor(param: Box2DParameter);
    /**
     * このクラスにボディを追加し、その `EBody` を返す。
     * すでに同エンティティが追加されている場合は何もせず `null` を返す。
     * エンティティのアンカーポイントが (0.5, 0.5) に指定される点に注意。
     * @param entity 対象のエンティティ
     * @param bodyDef 対象のb2BodyDef
     * @param fixtureDef 対象のb2FixtureDefまたは対象のb2FixtureDefの配列
     */
    createBody(entity: g.E, bodyDef: box2dweb.Dynamics.b2BodyDef, fixtureDef: box2dweb.Dynamics.b2FixtureDef | box2dweb.Dynamics.b2FixtureDef[]): EBody | null;
    /**
     * このクラスに追加された `EBody` を削除する。
     * @param ebody 削除する `EBody`
     */
    removeBody(ebody: EBody): void;
    /**
     * エンティティからこのクラスに追加されている `EBody` を返す。
     * @param entity エンティティ
     */
    getEBodyFromEntity(entity: g.E): EBody | null;
    /**
     * `b2Body` からこのクラスに追加されている `EBody` を返す。
     * @param b2Body b2Body
     */
    getEBodyFromb2Body(b2Body: box2dweb.Dynamics.b2Body): EBody | null;
    /**
     * このクラスのインスタンスを破棄する。
     */
    destroy(): void;
    /**
     * このクラスのインスタンスが破棄済みであるかを返す。
     */
    destroyed(): boolean;
    /**
     * 時間を経過させ、このクラスに追加されたエンティティの座標と角度を変更する。
     * このメソッドは暗黙的に `E#modified()` を呼び出している。
     * @param dt 経過させる時間単位
     * @param velocityIteration 速度演算のイテレーション回数 省略時は10
     * @param positionIteration 位置演算のイテレーション回数 省略時は10
     */
    step(dt: number, velocityIteration?: number, positionIteration?: number): void;
    /**
     * ボディ同士の接触を、Box2DWebのユーザデータを参照して検出する。
     * @param body1 対象のボディ
     * @param body2 対象のボディ
     * @param contact 対象のb2Contacts
     */
    isContact(body1: EBody, body2: EBody, contact: box2dweb.Dynamics.Contacts.b2Contact): boolean;
    /**
     * 長方形を表す `b2PolygonShape` インスタンスを生成する。
     * @param width 横幅 px
     * @param height 縦幅 px
     */
    createRectShape(width: number, height: number): box2dweb.Collision.Shapes.b2PolygonShape;
    /**
     * 円を表す `b2CircleShape` インスタンスを生成する。
     * @param diameter 直径 px
     */
    createCircleShape(diameter: number): box2dweb.Collision.Shapes.b2CircleShape;
    /**
     * 任意の多角形を表す `b2PolygonShape` インスタンスを生成する。
     * @param vertices[] 各頂点の `b2Vec2` 配列
     */
    createPolygonShape(vertices: box2dweb.Common.Math.b2Vec2[]): box2dweb.Collision.Shapes.b2PolygonShape;
    /**
     * b2FixtureDefインスタンスを生成する。
     * @param fixtureOption FixtureOption
     */
    createFixtureDef(fixtureDef: Box2DFixtureDef): box2dweb.Dynamics.b2FixtureDef;
    /**
     * `b2BodyDef` インスタンスを生成する。
     * @param bodyDef Box2DBodyDef
     */
    createBodyDef(bodyDef: Box2DBodyDef): box2dweb.Dynamics.b2BodyDef;
    /**
     * ラジアンを度に変換する。
     * @param radian 対象のラジアン
     */
    degree(radian: number): number;
    /**
     * 度をラジアンに変換する。
     * @param degree 対象の度
     */
    radian(degree: number): number;
    /**
     * この物理エンジン世界のビクセルスケールに変換した `b2Vec2` インスタンスを生成する。
     * @param x x方向のピクセル値
     * @param y y方向のピクセル値
     */
    vec2(x: number, y: number): box2dweb.Common.Math.b2Vec2;
    private stepBodies;
}
