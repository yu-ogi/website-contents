import { Particle } from "./Particle";
export interface ParticleInitialParameterObject {
    angle: number[];
    tx: number[];
    txMin?: number[];
    txMax?: number[];
    ty: number[];
    tyMin?: number[];
    tyMax?: number[];
    v: number[];
    vMin?: number[];
    vMax?: number[];
    tv?: number[];
    tvRelIV?: number[];
    tvNTOA?: number[];
    a: number[];
    aMin?: number[];
    aMax?: number[];
    rz: number[];
    rzMin?: number[];
    rzMax?: number[];
    vrz: number[];
    vrzMin?: number[];
    vrzMax?: number[];
    arz: number[];
    arzMin?: number[];
    arzMax?: number[];
    tvrz?: number[];
    tvrzRelIVRZ?: number[];
    tvrzC?: number[];
    tvrzNTOA?: number[];
    sx: number[];
    sxMin: number[];
    sxMax: number[];
    vsx: number[];
    vsxMin: number[];
    vsxMax: number[];
    asx: number[];
    asxMin: number[];
    asxMax: number[];
    sy: number[];
    syMin: number[];
    syMax: number[];
    vsy: number[];
    vsyMin: number[];
    vsyMax: number[];
    asy: number[];
    asyMin: number[];
    asyMax: number[];
    sxy: number[];
    sxyMin: number[];
    sxyMax: number[];
    vsxy: number[];
    vsxyMin: number[];
    vsxyMax: number[];
    asxy: number[];
    asxyMin: number[];
    asxyMax: number[];
    tsx?: number[];
    tsy?: number[];
    tsxy?: number[];
    alpha: number[];
    fadeInNT?: number[];
    fadeOutNT?: number[];
    lifespan: number[];
}
export interface EmitterParameterObject {
    gx: number;
    gy: number;
    interval: number;
    activePeriod: number;
    delayEmit: number;
    numParticlesPerEmit: number;
    maxParticles: number;
    children: Emitter[];
    randomFunc: () => number;
    initParam: ParticleInitialParameterObject;
    userData: any;
}
export declare enum EmitterStatus {
    Stop = 0,
    Running = 1,
    Pause = 2
}
export declare class Emitter {
    status: EmitterStatus;
    gx: number;
    gy: number;
    interval: number;
    randomFunc: () => number;
    activePeriod: number;
    maxParticles: number;
    children: Emitter[];
    delayEmit: number;
    numParticlesPerEmit: number;
    initParam: ParticleInitialParameterObject;
    userData: any;
    particles: Particle[];
    onInitParticleHandlers: Array<(p: Particle, emitter: Emitter) => void>;
    onPreUpdateParticleHandlers: Array<(p: Particle, emitter: Emitter, dt: number) => void>;
    constructor(param: EmitterParameterObject);
    /**
     * エミッタの動作を開始する。
     */
    start(): void;
    /**
     * エミッタの動作を停止する。
     *
     * すでにエミットされたパーティクルの更新は行われる。
     */
    stop(): void;
    pause(): void;
    reset(): void;
    emitOneAt(x: number, y: number): void;
    emitAt(x: number, y: number): void;
    /**
     * Emitter.interval間隔でエミットする。
     *
     * @param time Emitterの現在時刻。０以上の実数
     * @param dt 前回のエミットからの経過時間。０より大きい実数
     * @param x エミットするX座標
     * @param y エミットするY座標
     */
    emitTimerAt(time: number, dt: number, x: number, y: number): void;
    update(dt: number): void;
    private pickParam;
}
