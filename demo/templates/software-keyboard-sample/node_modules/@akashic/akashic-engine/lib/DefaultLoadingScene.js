"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultLoadingScene = void 0;
var CameraCancellingE_1 = require("./entities/CameraCancellingE");
var FilledRect_1 = require("./entities/FilledRect");
var LoadingScene_1 = require("./LoadingScene");
/**
 * デフォルトローディングシーン。
 *
 * `Game#_defaultLoadingScene` の初期値として利用される。
 * このシーンはいかなるアセットも用いてはならない。
 */
var DefaultLoadingScene = /** @class */ (function (_super) {
    __extends(DefaultLoadingScene, _super);
    /**
     * `DefaultLoadingScene` のインスタンスを生成する。
     * @param param 初期化に用いるパラメータのオブジェクト
     */
    function DefaultLoadingScene(param) {
        var _this = _super.call(this, { game: param.game, name: "akashic:default-loading-scene" }) || this;
        if (param.style === "compact") {
            _this._barWidth = _this.game.width / 4;
            _this._barHeight = 5;
            _this._style = "compact";
        }
        else {
            _this._barWidth = Math.min(_this.game.width, Math.max(100, _this.game.width / 2));
            _this._barHeight = 5;
            _this._style = "default";
        }
        _this._gauge = undefined;
        _this._gaugeUpdateCount = 0;
        _this._totalWaitingAssetCount = 0;
        _this.onLoad.add(_this._handleLoad, _this);
        _this.onTargetReset.add(_this._handleTargetReset, _this);
        _this.onTargetAssetLoad.add(_this._handleTargetAssetLoad, _this);
        return _this;
    }
    /**
     * @private
     */
    DefaultLoadingScene.prototype._handleLoad = function () {
        var barX, barY, bgColor;
        if (this._style === "compact") {
            var margin = Math.min(this.game.width, this.game.height) * 0.05;
            barX = this.game.width - margin - this._barWidth;
            barY = this.game.height - margin - this._barHeight;
            bgColor = "transparent";
        }
        else {
            barX = (this.game.width - this._barWidth) / 2;
            barY = (this.game.height - this._barHeight) / 2;
            bgColor = "rgba(0, 0, 0, 0.8)";
        }
        var gauge;
        this.append(new CameraCancellingE_1.CameraCancellingE({
            scene: this,
            children: [
                new FilledRect_1.FilledRect({
                    scene: this,
                    width: this.game.width,
                    height: this.game.height,
                    cssColor: bgColor,
                    children: [
                        new FilledRect_1.FilledRect({
                            scene: this,
                            x: barX,
                            y: barY,
                            width: this._barWidth,
                            height: this._barHeight,
                            cssColor: "gray",
                            children: [
                                (gauge = new FilledRect_1.FilledRect({
                                    scene: this,
                                    width: 0,
                                    height: this._barHeight,
                                    cssColor: "white"
                                }))
                            ]
                        })
                    ]
                })
            ]
        }));
        gauge.onUpdate.add(this._handleUpdate, this);
        this._gauge = gauge;
        return true; // Trigger 登録を解除する
    };
    /**
     * @private
     */
    DefaultLoadingScene.prototype._handleUpdate = function () {
        var BLINK_RANGE = 50;
        var BLINK_PER_SEC = 2 / 3;
        ++this._gaugeUpdateCount;
        // 白を上限に sin 波で明滅させる (updateしていることの確認)
        var c = Math.round(255 - BLINK_RANGE + Math.sin((this._gaugeUpdateCount / this.game.fps) * BLINK_PER_SEC * (2 * Math.PI)) * BLINK_RANGE);
        this._gauge.cssColor = "rgb(" + c + "," + c + "," + c + ")";
        this._gauge.modified();
    };
    /**
     * @private
     */
    DefaultLoadingScene.prototype._handleTargetReset = function (targetScene) {
        if (this._gauge) {
            this._gauge.width = 0;
            this._gauge.modified();
        }
        this._totalWaitingAssetCount = targetScene._sceneAssetHolder.waitingAssetsCount;
    };
    /**
     * @private
     */
    DefaultLoadingScene.prototype._handleTargetAssetLoad = function (_asset) {
        var waitingAssetsCount = this._targetScene._sceneAssetHolder.waitingAssetsCount;
        this._gauge.width = Math.ceil((1 - waitingAssetsCount / this._totalWaitingAssetCount) * this._barWidth);
        this._gauge.modified();
    };
    return DefaultLoadingScene;
}(LoadingScene_1.LoadingScene));
exports.DefaultLoadingScene = DefaultLoadingScene;
