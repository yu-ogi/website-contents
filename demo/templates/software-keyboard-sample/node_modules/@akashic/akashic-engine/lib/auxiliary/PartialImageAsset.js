"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartialImageAsset = void 0;
var trigger_1 = require("@akashic/trigger");
/**
 * 部分画像アセット。
 *
 * `resourceFacotory.createImageAsset()` で生成したアセットをラップし、`slice` で指定される領域の画像アセットとして振る舞う。
 * 通常、ゲーム開発者がこのクラスを生成する必要はない。
 */
var PartialImageAsset = /** @class */ (function () {
    /**
     * 部分画像アセットを生成する。
     *
     * `createImageAsset()` と異なり、 `slice` で指定された領域の画像アセットとして振る舞うため、
     * `this.width`, `this.height` が引数の `width`, height` ではなく `slice` の値で初期化される点に注意。
     * (`width`, `height` は元になる画像アセットの生成に使われる)
     */
    function PartialImageAsset(resourceFactory, id, uri, width, height, slice) {
        this.type = "image";
        this.hint = undefined;
        this.onDestroyed = new trigger_1.Trigger();
        this._surface = null;
        this._loadHandler = null;
        this.id = id;
        this.path = uri;
        this.originalPath = uri;
        this.width = slice.width;
        this.height = slice.height;
        this._slice = slice;
        this._resourceFactory = resourceFactory;
        var internalId = "".concat(id, "/<internal>"); // AssetManager が管理しないので値は何でもよいが、わかりやすさのため `id` を元にしておく
        this._src = resourceFactory.createImageAsset(internalId, uri, width, height);
    }
    PartialImageAsset.prototype.initialize = function (hint) {
        this.hint = hint; // 自分では使わないが、外部観測的に `ImageAsset` と合うように代入しておく
        this._src.initialize(hint);
    };
    PartialImageAsset.prototype.inUse = function () {
        return false;
    };
    PartialImageAsset.prototype.destroy = function () {
        if (this.destroyed()) {
            return;
        }
        this.onDestroyed.fire(this);
        this._src.destroy();
        this._src = null;
        this._slice = null;
        this._resourceFactory = null;
        this._surface = null;
        this._loadHandler = null;
        this.onDestroyed.destroy();
        this.onDestroyed = undefined;
    };
    PartialImageAsset.prototype.destroyed = function () {
        return !this._src;
    };
    PartialImageAsset.prototype.asSurface = function () {
        if (this._surface)
            return this._surface;
        var _a = this._slice, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var surface = this._resourceFactory.createSurface(width, height);
        var r = surface.renderer();
        r.begin();
        r.drawImage(this._src.asSurface(), x, y, width, height, 0, 0);
        r.end();
        this._surface = surface;
        return surface;
    };
    /**
     * @private
     */
    PartialImageAsset.prototype._load = function (loader) {
        this._loadHandler = loader;
        this._src._load(this);
    };
    /**
     * this._src 用のロードハンドラ。
     * @private
     */
    PartialImageAsset.prototype._onAssetLoad = function (_asset) {
        this._loadHandler._onAssetLoad(this);
    };
    /**
     * this._src 用のロードエラーハンドラ。
     * @private
     */
    PartialImageAsset.prototype._onAssetError = function (_asset, error) {
        this._loadHandler._onAssetError(this, error);
    };
    /**
     * @private
     */
    PartialImageAsset.prototype._assetPathFilter = function (path) {
        return path;
    };
    return PartialImageAsset;
}());
exports.PartialImageAsset = PartialImageAsset;
