import { Vec3Like } from "./Vec3Like";
/**
 * 3次元ベクトル。
 */
export declare class Vec3 {
    /**
     * 零ベクトル。
     */
    static readonly zero: Readonly<Vec3Like>;
    /**
     * x, y, z 要素をコピーする。
     *
     * @param v1 コピー先ベクトル。
     * @param v2 コピー元ベクトル。
     */
    static copy(v1: Vec3Like, v2: Vec3Like): Vec3Like;
    /**
     * 二つのベクトルを比較する。
     *
     * ベクトルが等しい時、真。
     *
     * @param v1 ベクトル。
     * @param v2 ベクトル。
     */
    static equal(v1: Vec3Like, v2: Vec3Like): boolean;
    /**
     * 二つのベクトルを加算する。
     *
     * @param v1 ベクトル。結果はこのベクトルに格納される。
     * @param v2 ベクトル。
     */
    static add(v1: Vec3Like, v2: Vec3Like): Vec3Like;
    /**
     * 二つのベクトルを減算する。
     *
     * @param v1 ベクトル。結果はこのベクトルに格納される。
     * @param v2 ベクトル。
     */
    static sub(v1: Vec3Like, v2: Vec3Like): Vec3Like;
    /**
     * 内積を求める。
     *
     * @param v1 ベクトル。
     * @param v2 ベクトル。
     */
    static dot(v1: Vec3Like, v2: Vec3Like): number;
    /**
     * 外積を求める。
     *
     * @param v1 ベクトル。
     * @param v2 ベクトル。
     */
    static cross(v1: Vec3Like, v2: Vec3Like): Vec3Like;
    /**
     * 二つの単位ベクトルが平行か調べる。
     *
     * 二つのベクトルの内積が閾値以上の時、真（平行）。
     *
     * @param v1 単位ベクトル。
     * @param v2 単位ベクトル。
     * @param threshold 閾値。省略時 1 。
     */
    static parallel(v1: Vec3Like, v2: Vec3Like, threshold?: number): boolean;
    /** X要素。 */
    x: number;
    /** Y要素。 */
    y: number;
    /** Z要素。 */
    z: number;
    /**
     * コンストラクタ。
     *
     * @param x X要素初期値。
     * @param y Y要素初期値。
     * @param z Z要素初期値。
     */
    constructor(x: number, y: number, z: number);
    /**
     * コンストラクタ。
     *
     * @param vec3Like 初期値。省略時、零ベクトル。
     */
    constructor(vec3Like?: Vec3Like);
    /**
     * x, y, z 要素をこのベクトルにコピーする。
     *
     * @param v コピー元ベクトル。
     */
    copy(v: Vec3Like): this;
    /**
     * 複製する。
     */
    clone(): Vec3;
    /**
     * 比較する。
     *
     * 等しい時、真。
     *
     * @param v ベクトル。
     */
    equal(v: Vec3Like): boolean;
    /**
     * このベクトルと単位ベクトルが平行か調べる。
     *
     * このベクトル自身が単位ベクトルでなければならない。
     *
     * 二つのベクトルの内積が閾値以上の時、真（平行）。
     *
     * @param v 単位ベクトル。
     * @param threshold 閾値。省略時 1 。
     */
    parallel(v: Vec3Like, threshold?: number): boolean;
    /**
     * 加算する。
     *
     * @param v ベクトル。
     */
    add(v: Vec3Like): this;
    /**
     * 減算する。
     *
     * @param v ベクトル。
     */
    sub(v: Vec3Like): this;
    /**
     * スケールする。
     *
     * @param v スケール。
     */
    scale(v: number): this;
    /**
     * アダマール積を求める。
     *
     * @param v ベクトル。
     */
    mul(v: Vec3Like): this;
    /**
     * 内積を求める。
     *
     * @param v ベクトル。
     */
    dot(v: Vec3Like): number;
    /**
     * 外積を求める。
     *
     * @param v ベクトル。
     */
    cross(v: Vec3Like): Vec3;
    /**
     * 投影する。
     *
     * @param v 投影先のベクトル。
     */
    project(v: Vec3Like): this;
    /**
     * 投影したベクトルから自身へ向かうベクトルにする。
     *
     * @param v 投影先のベクトル。
     */
    reject(v: Vec3Like): this;
    /**
     * 反射する。
     *
     * @param n 法線ベクトル。
     */
    reflect(n: Vec3Like): this;
    /**
     * 長さの二乗を求める。
     */
    squaredLength(): number;
    /**
     * 長さを求める。
     */
    length(): number;
    /**
     * 正規化する。
     */
    normalize(): this;
    /**
     * 符号を反転する。
     */
    negate(): this;
    /**
     * 四捨五入する。
     */
    round(): this;
    /**
     * 小数点以下を切り捨てる。
     */
    floor(): this;
    /**
     * 小数点以下を切り上げる。
     */
    ceil(): this;
    /**
     * 各要素を符号を表す +/- 1, +/- 0 にする。
     */
    sign(): this;
    /**
     * X軸回転する。
     *
     * @param angle 回転の角度[radian]。
     */
    rotateX(angle: number): this;
    /**
     * Y軸回転する。
     *
     * @param angle 回転の角度[radian]。
     */
    rotateY(angle: number): this;
    /**
     * Z軸回転する。
     *
     * @param angle 回転の角度[radian]。
     */
    rotateZ(angle: number): this;
}
