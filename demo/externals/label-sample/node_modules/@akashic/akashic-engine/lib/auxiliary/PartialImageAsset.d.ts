import type { Asset, AssetLoadError, AssetLoadHandler, CommonArea, ImageAsset, ImageAssetHint, ResourceFactory, Surface } from "@akashic/pdi-types";
import { Trigger } from "@akashic/trigger";
/**
 * 部分画像アセット。
 *
 * `resourceFacotory.createImageAsset()` で生成したアセットをラップし、`slice` で指定される領域の画像アセットとして振る舞う。
 * 通常、ゲーム開発者がこのクラスを生成する必要はない。
 */
export declare class PartialImageAsset implements ImageAsset {
    id: string;
    path: string;
    originalPath: string;
    type: "image";
    width: number;
    height: number;
    hint: ImageAssetHint | undefined;
    onDestroyed: Trigger<Asset>;
    _src: ImageAsset;
    _slice: CommonArea;
    _resourceFactory: ResourceFactory;
    _surface: Surface | null;
    _loadHandler: AssetLoadHandler | null;
    /**
     * 部分画像アセットを生成する。
     *
     * `createImageAsset()` と異なり、 `slice` で指定された領域の画像アセットとして振る舞うため、
     * `this.width`, `this.height` が引数の `width`, height` ではなく `slice` の値で初期化される点に注意。
     * (`width`, `height` は元になる画像アセットの生成に使われる)
     */
    constructor(resourceFactory: ResourceFactory, id: string, uri: string, width: number, height: number, slice: CommonArea);
    initialize(hint: ImageAssetHint | undefined): void;
    inUse(): boolean;
    destroy(): void;
    destroyed(): boolean;
    asSurface(): Surface;
    /**
     * @private
     */
    _load(loader: AssetLoadHandler): void;
    /**
     * this._src 用のロードハンドラ。
     * @private
     */
    _onAssetLoad(_asset: Asset): void;
    /**
     * this._src 用のロードエラーハンドラ。
     * @private
     */
    _onAssetError(_asset: Asset, error: AssetLoadError): void;
    /**
     * @private
     */
    _assetPathFilter(path: string): string;
}
