import { Vec2Like } from "./Vec2Like";
import { Vec3Like } from "./Vec3Like";
import { Vec2 } from "./Vec2";
import { Vec3 } from "./Vec3";
/**
 * 3x3行列。
 */
export declare class Mat33 {
    /**
     * 単位ベクトル。
     */
    static readonly identity: Readonly<Mat33>;
    /**
     * スケール行列を作成する。
     *
     * @param scale スケール行列。
     */
    static makeScale(scale: Vec3Like): Mat33;
    /** 第一列 */
    ex: Vec3;
    /** 第二列 */
    ey: Vec3;
    /** 第三列 */
    ez: Vec3;
    /**
     * コンストラクタ。
     *
     * @param ex 第一列。省略時 (1, 0, 0)。
     * @param ey 第二列。省略時 (0, 1, 0)。
     * @param ez 第三列。省略時 (0, 0, 1)。
     */
    constructor(ex?: Vec3Like, ey?: Vec3Like, ez?: Vec3Like);
    /**
     * 複製する。
     */
    clone(): Mat33;
    /**
     * 比較する。
     *
     * 行列が等しい時、真。
     *
     * @param m 比較する行列。
     */
    equal(m: Mat33): boolean;
    /**
     * 行列を乗算する。
     *
     * @param m 行列。
     */
    mul(m: Mat33): this;
    /**
     * 行列式を求める。
     */
    determinant(): number;
    /**
     * 転置行列にする。
     */
    transpose(): this;
    /**
     * 逆行列にする。
     *
     * 逆行列が存在しない時 null 。
     */
    inverse(): this | null;
    /**
     * 単位行列にする。
     */
    setIdentity(): this;
    /**
     * Z軸回転する。
     *
     * @param angle 回転の角度[rad]。
     */
    rotateZ(angle: number): this;
    /**
     * スケールする。
     *
     * @param scale スケール。
     */
    scale(scale: Vec3Like): this;
    /**
     * 平行移動する。
     *
     * @param t 平行移動量。
     */
    translate(t: Vec3Like): this;
    /**
     * 平行移動量を設定する。
     *
     * @param t 平行移動量。
     */
    setTranslate(t: Vec3Like): this;
    /**
     * ベクトルを乗算する。
     *
     * 結果は新しいベクトルに格納される。
     *
     * @param v ベクトル。 Z成分は０とみなされる。
     */
    mulVec2(v: Vec2Like): Vec2;
    /**
     * ベクトルを乗算する。
     *
     * @param v ベクトル。 Z成分は０とみなされる。
     * @param out 結果を格納するベクトル。
     */
    mulVec2<T extends Vec2Like>(v: Vec2Like, out: T): T;
    /**
     * ベクトルを乗算する。
     *
     * 結果は新しいベクトルに格納される。
     *
     * @param v ベクトル。
     */
    mulVec3(v: Vec3Like): Vec3;
    /**
     * ベクトルを乗算する。
     *
     * @param v ベクトル。
     * @param out 結果を格納するベクトル。
     */
    mulVec3<T extends Vec3Like>(v: Vec3Like, out: T): T;
}
