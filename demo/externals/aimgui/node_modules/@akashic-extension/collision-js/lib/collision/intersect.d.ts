import { Vec2Like } from "../math";
import { AABB } from "./AABB";
import { Box } from "./Box";
import { Circle } from "./Circle";
import { Contact } from "./Contact";
import { Line } from "./Line";
import { Polygon } from "./Polygon";
import { Segment } from "./Segment";
/**
 * 点が直線によって分けられた２つの半空間のいずれに位置するか調べる。
 *
 * 点が直線上にある時、０。そうでない時、位置する半空間に応じて正または負の値を返す。
 *
 * @param line 直線。
 * @param p 点の位置。
 */
export declare function whichSide(line: Line, p: Vec2Like): number;
/**
 * 矩形の辺を得る。
 *
 * 各辺の番号は0から始まり、下辺から時計回りに配される。a~d はそれぞれ頂点である。
 *
 * 図はX軸が右を、Y軸が下を向いている。
 *
 * ```
 *       2
 *    c-----d
 *    |     |
 *  1 |     | 3
 *    |     |
 *    b-----a
 *       0
 * ```
 *
 *  各辺の (始点, 終点) は次のようになる。
 *
 *  - 辺番号0: (a, b)
 *  - 辺番号1: (b, c)
 *  - 辺番号2: (c, d)
 *  - 辺番号3: (d, a)
 *
 * 辺番号が不正な時 null を返す。
 *
 * @param box 矩形。
 * @param idx 辺の番号。 [0, 3] 。
 */
export declare function getBoxEdge(box: Box, idx: number): Segment | null;
/**
 * 矩形の頂点の座標を得る。
 *
 * 図はX軸が右を、Y軸が下を向いている。a~bは頂点を表す。
 *
 * ```
 * c-----d
 * |     |
 * |     |
 * |     |
 * b-----a
 * ```
 *
 * - 頂点番号0: a
 * - 頂点番号1: b
 * - 頂点番号2: c
 * - 頂点番号3: d
 *
 * 頂点番号が不正な時 null を返す。
 *
 * @param b 矩形。
 * @param idx 頂点の番号 [0, 3] 。
 */
export declare function getBoxCorner(b: Box, idx: number): Vec2Like | null;
/**
 * AABBの頂点の座標を得る。
 *
 * 図はX軸が右を、Y軸が下を向いている。a~bは頂点を表す。
 *
 * ```
 * c-----d
 * |     |
 * |     |
 * |     |
 * b-----a
 * ```
 *
 * - 頂点番号0: a
 * - 頂点番号1: b
 * - 頂点番号2: c
 * - 頂点番号3: d
 *
 * 頂点番号が不正な時 null を返す。
 *
 * @param aabb AABB 。
 * @param idx 頂点の番号 [0, 3] 。
 */
export declare function getAABBCorner(aabb: AABB, idx: number): Vec2Like | null;
/**
 * 線分と線分に重なる直線に投影した矩形の交差判定。
 *
 * @param box 矩形。
 * @param segment 線分。
 */
export declare function overlapBoxAndSegment(box: Box, segment: Segment): boolean;
/**
 * 線分と線分に重なる直線に投影したAABBの交差判定。
 *
 * @param aabb AABB 。
 * @param segment 線分。
 */
export declare function overlapAABBAndSegment(aabb: AABB, segment: Segment): boolean;
/**
 * AABB が 点 p を含むように拡張する。
 *
 * @param aabb AABB 。
 * @param p 点の位置。
 */
export declare function enlargeAABB(aabb: AABB, p: Vec2Like): void;
/**
 * 矩形に外接する AABB 生成する。
 *
 * @param b 矩形。
 */
export declare function createAABBFromBox(b: Box): AABB;
/**
 * AABB と AABB の交差テスト。
 *
 * @param a AABB A.
 * @param b AABB B.
 */
export declare function aabbToAABB(a: AABB, b: AABB): boolean;
/**
 * 円と円の交差テスト。
 *
 * @param a 円A。
 * @param b 円B。
 */
export declare function circleToCircle(a: Circle, b: Circle): boolean;
/**
 * 円と円の交差テスト。
 *
 * 交差しない時 null を返す。
 *
 * @param a 円A。
 * @param b 円B。
 */
export declare function circleToCircleContact(a: Circle, b: Circle): Contact | null;
/**
 * 点と点の交差テスト。
 *
 * @param a 点の位置。
 * @param b 点の位置。
 */
export declare function vecToVec(a: Vec2Like, b: Vec2Like): boolean;
/**
 * 直線と直線の交差テスト。
 *
 * @param a 直線A。
 * @param b 直線B。
 */
export declare function lineToLine(a: Line, b: Line): boolean;
/**
 * 線分と線分の交差テスト。
 *
 * @param a 線分A。
 * @param b 線分B。
 */
export declare function segmentToSegment(a: Segment, b: Segment): boolean;
/**
 * 矩形と矩形の交差判定。
 *
 * @param a 矩形。
 * @param b 矩形。
 */
export declare function boxToBox(a: Box, b: Box): boolean;
/**
 * 円と点の交差テスト。
 *
 * @param c 円。
 * @param v 点の位置。
 */
export declare function circleToVec(c: Circle, v: Vec2Like): boolean;
/**
 * 円と直線の交差テスト。
 *
 * @param c 円。
 * @param l 直線。
 */
export declare function circleToLine(c: Circle, l: Line): boolean;
/**
 * 円と線分の交差判定。
 *
 * @param c 円。
 * @param s 線分。
 */
export declare function circleToSegment(c: Circle, s: Segment): boolean;
/**
 * 円と AABB の交差判定。
 *
 * @param c 円。
 * @param aabb AABB。
 */
export declare function circleToAABB(c: Circle, aabb: AABB): boolean;
/**
 * 円と矩形の交差判定。
 *
 * @param c 円。
 * @param b 矩形。
 */
export declare function circleToBox(c: Circle, b: Box): boolean;
/**
 * AABBと点の交差判定。
 *
 * @param aabb AABB 。
 * @param v 点の位置。
 */
export declare function aabbToVec(aabb: AABB, v: Vec2Like): boolean;
/**
 * AABBと直線の交差判定。
 *
 * @param aabb AABB 。
 * @param l 直線。
 */
export declare function aabbToLine(aabb: AABB, l: Line): boolean;
/**
 * AABBと線分の交差判定。
 *
 * @param aabb AABB 。
 * @param s 線分。
 */
export declare function aabbToSegment(aabb: AABB, s: Segment): boolean;
/**
 * AABB と矩形の交差判定。
 *
 * @param aabb AABB 。
 * @param b 矩形。
 */
export declare function aabbToBox(aabb: AABB, b: Box): boolean;
/**
 * 点と直線の交差判定。
 *
 * @param v 点の位置。
 * @param l 直線。
 */
export declare function vecToLine(v: Vec2Like, l: Line): boolean;
/**
 * 点と線分の交差判定。
 *
 * @param v 点の位置。
 * @param s 線分。
 */
export declare function vecToSegment(v: Vec2Like, s: Segment): boolean;
/**
 * 点と矩形の交差判定。
 *
 * @param v 点の位置。
 * @param b 矩形。
 */
export declare function vecToBox(v: Vec2Like, b: Box): boolean;
/**
 * 直線と線分の交差判定。
 *
 * @param l 直線。
 * @param s 線分。
 */
export declare function lineToSegment(l: Line, s: Segment): boolean;
/**
 * 直線と矩形の交差判定。
 *
 * @param l 直線。
 * @param b 矩形。
 */
export declare function lineToBox(l: Line, b: Box): boolean;
/**
 * 線分と矩形の交差判定。
 *
 * @param s 線分。
 * @param b 矩形。
 */
export declare function segmentToBox(s: Segment, b: Box): boolean;
/**
 * 多角形と多角形の交差判定。
 *
 * @param p1 多角形1。３頂点以上の凸多角形でなければならない。
 * @param p2 多角形2。３頂点以上の凸多角形でなければならない。
 */
export declare function polygonToPolygon(p1: Polygon, p2: Polygon): boolean;
/**
 * 多角形と線分の交差判定。
 *
 * @param p 多角形。３頂点以上の凸多角形でなければならない。
 * @param s 線分。
 */
export declare function polygonToSegment(p: Polygon, s: Segment): boolean;
/**
 * 多角形と円の交差判定。
 *
 * @param p 多角形。３頂点以上の凸多角形でなければならない。
 * @param c 円。
 */
export declare function polygonToCircle(p: Polygon, c: Circle): boolean;
/**
 * 多角形と点の交差判定。
 *
 * @param p 多角形。３頂点以上の凸多角形でなければならない。
 * @param v 点の位置。
 */
export declare function polygonToVec(p: Polygon, v: Vec2Like): boolean;
/**
 * 多角形と矩形の交差判定。
 *
 * @param p 多角形。３頂点以上の凸多角形でなければならない。
 * @param b 矩形s。
 */
export declare function polygonToBox(p: Polygon, b: Box): boolean;
/**
 * 多角形とAABBの交差判定。
 *
 * @param p 多角形。３頂点以上の凸多角形でなければならない。
 * @param aabb AABB。
 */
export declare function polygonToAABB(p: Polygon, _aabb: AABB): boolean;
/**
 * 多角形と直線の交差判定。
 *
 * @param p 多角形。３頂点以上の凸多角形でなければならない。
 * @param aabb AABB。
 */
export declare function polygonToLine(p: Polygon, line: Line): boolean;
