import { CommonSize, ResourceFactory } from "@akashic/pdi-types";
import { Glyph } from "./Glyph";
import { SurfaceAtlas } from "./SurfaceAtlas";
/**
 * SurfaceAtlasが効率よく動作するためのヒント。
 *
 * ゲーム開発者はSurfaceAtlasが効率よく動作するための各種初期値・最大値などを提示できる。
 * SurfaceAtlasはこれを参考にするが、そのまま採用するとは限らない。
 */
export interface SurfaceAtlasSetHint {
    /**
     * 初期アトラス幅。
     */
    initialAtlasWidth?: number;
    /**
     * 初期アトラス高さ。
     */
    initialAtlasHeight?: number;
    /**
     * 最大アトラス幅。
     */
    maxAtlasWidth?: number;
    /**
     * 最大アトラス高さ。
     */
    maxAtlasHeight?: number;
    /**
     * 最大アトラス保持数。
     */
    maxAtlasNum?: number;
}
/**
 * SurfaceAtlasSet のコンストラクタに渡すことができるパラメータ。
 */
export interface SurfaceAtlasSetParameterObject {
    /**
     * ゲームインスタンス。
     */
    resourceFactory: ResourceFactory;
    /**
     * ヒント。
     *
     * 詳細は `SurfaceAtlasSetHint` を参照。
     */
    hint?: SurfaceAtlasSetHint;
}
/**
 * DynamicFont で使用される SurfaceAtlas を管理するクラス。
 *
 * 歴史的経緯のため、名前に反して DynamicFont 専用のクラスであり、汎用の SurfaceAtlas 管理クラスではない点に注意。
 */
export declare class SurfaceAtlasSet {
    /**
     * SurfaceAtlas最大保持数初期値
     */
    static INITIAL_MAX_SURFACEATLAS_NUM: number;
    /**
     * @private
     */
    _surfaceAtlases: SurfaceAtlas[];
    /**
     * @private
     */
    _atlasGlyphsTable: Glyph[][];
    /**
     * @private
     */
    _maxAtlasNum: number;
    /**
     * @private
     */
    _resourceFactory: ResourceFactory;
    /**
     * @private
     */
    _atlasSize: CommonSize;
    /**
     * @private
     */
    _currentAtlasIndex: number;
    constructor(params: SurfaceAtlasSetParameterObject);
    /**
     * @private
     */
    _deleteAtlas(delteNum: number): void;
    /**
     * surfaceAtlases の最も利用されていない SurfaceAtlas を探し、 そのインデックスを返す。
     *
     * _surfaceAtlases の長さが 0 の場合、 -1 を返す。
     * @private
     */
    _findLeastFrequentlyUsedAtlasIndex(): number;
    /**
     * surfaceAtlases の最も利用されていない SurfaceAtlas を切り離して返す。
     *
     * 返された SurfaceAtlas に紐づいていたすべての Glyph はサーフェスを失う (_isSurfaceValid が偽になる) 。
     * _surfaceAtlases の長さが 0 の場合、 何もせず null を返す。
     * @private
     */
    _spliceLeastFrequentlyUsedAtlas(): SurfaceAtlas | null;
    /**
     * 空き領域のある SurfaceAtlas を探索する。
     * glyph が持つ情報を SurfaceAtlas へ移動し、移動した SurfaceAtlas の情報で glyph を置き換える。
     * glyph が持っていた surface は破棄される。
     *
     * 移動に成功した場合 `true` を、失敗した (空き領域が見つからなかった) 場合 `false` を返す。
     * @private
     */
    _moveGlyphSurface(glyph: Glyph): boolean;
    /**
     * サーフェスアトラスの再割り当てを行う。
     * @private
     */
    _reallocateAtlas(): void;
    /**
     * 引数で指定されたindexのサーフェスアトラスを取得する。
     *
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     * @param index 取得対象のインデックス
     */
    getAtlas(index: number): SurfaceAtlas;
    /**
     * サーフェスアトラスの保持数を取得する。
     *
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     */
    getAtlasNum(): number;
    /**
     * 最大サーフェスアトラス保持数取得する。
     */
    getMaxAtlasNum(): number;
    /**
     * 最大アトラス保持数設定する。
     *
     * 設定された値が、現在保持している_surfaceAtlasesの数より大きい場合、
     * removeLeastFrequentlyUsedAtlas()で設定値まで削除する。
     * @param value 設定値
     */
    changeMaxAtlasNum(value: number): void;
    /**
     * サーフェスアトラスのサイズを取得する。
     *
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     */
    getAtlasUsedSize(): CommonSize;
    /**
     * グリフを追加する。
     *
     * glyph が持っていたサーフェスは破棄され、このクラスが管理するいずれかの (サーフェスアトラスの) サーフェスに紐づけられる。
     * 追加に成功した場合 `true` を、失敗した (空き領域が見つからなかった) 場合 `false` を返す。
     *
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     * @param glyph グリフ
     */
    addGlyph(glyph: Glyph): boolean;
    /**
     * グリフの利用を通知する。
     *
     * サーフェスが不足した時、このクラスは最も利用頻度の低いサーフェスを解放して再利用する。
     * このメソッドによるグリフの利用通知は、利用頻度の低いサーフェスを特定するために利用される。
     *
     * 通常、ゲーム開発者がこのメソッドを呼び出す必要はない。
     * @param glyph グリフ
     */
    touchGlyph(glyph: Glyph): void;
    /**
     * このインスタンスを破棄する。
     */
    destroy(): void;
    /**
     * このインスタンスが破棄済みであるかどうかを返す。
     */
    destroyed(): boolean;
}
