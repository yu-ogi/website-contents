import { CommonArea, CommonOffset } from "@akashic/pdi-types";
import { E } from "./entities/E";
/**
 * オブジェクトなどの衝突判定機能を提供する。
 */
export declare module Collision {
    /**
     * 二つのエンティティの衝突判定を行い、その結果を返す。
     *
     * 回転・拡大されたエンティティや、親の異なるエンティティ同士も扱える汎用の衝突判定処理。
     * ただし計算量が多いので、大量のエンティティ間のすべての衝突を確認するような状況では利用を避けることが望ましい。
     * 親が同じで回転・拡大を行わないエンティティ同士の場合は、より軽量な Collision.intersectAreas() を利用すること。
     * 親が同じで中心座標同士の距離だけで判定してよい場合は、より軽量な Collision.withinAreas() を利用すること。
     *
     * 対象のエンティティの座標や大きさなどを変更した場合、
     * この関数の呼び出し前にそのエンティティの modified() を呼び出しておく必要がある。
     *
     * @param e1 衝突判定するエンティティ
     * @param e2 衝突判定するエンティティ
     * @param area1 e1 の当たり判定領域。省略された場合、`{ x: 0, y: 0, width: e1.width, hegiht: e1.height }`
     * @param area2 e2 の当たり判定領域。省略された場合、`{ x: 0, y: 0, width: e2.width, hegiht: e2.height }`
     */
    function intersectEntities(e1: E, e2: E, area1?: CommonArea | null, area2?: CommonArea | null): boolean;
    /**
     * 線分同士の衝突判定 (交差判定) を行い、その結果を返す。
     *
     * @param {CommonOffset} p1 線分の端点の一つ
     * @param {CommonOffset} p2 線分の端点の一つ
     * @param {CommonOffset} q1 もう一つの線分の端点の一つ
     * @param {CommonOffset} q2 もう一つの線分の端点の一つ
     */
    function intersectLineSegments(p1: CommonOffset, p2: CommonOffset, q1: CommonOffset, q2: CommonOffset): boolean;
    /**
     * 矩形交差による衝突判定を行い、その結果を返す。
     * 戻り値は、二つの矩形t1, t2が交差しているとき真、でなければ偽。
     *
     * @param {number} x1 t1のX座標
     * @param {number} y1 t1のY座標
     * @param {number} width1 t1の幅
     * @param {number} height1 t1の高さ
     * @param {number} x2 t2のX座標
     * @param {number} y2 t2のY座標
     * @param {number} width2 t2の幅
     * @param {number} height2 t2の高さ
     */
    function intersect(x1: number, y1: number, width1: number, height1: number, x2: number, y2: number, width2: number, height2: number): boolean;
    /**
     * 矩形交差による衝突判定を行い、その結果を返す。
     * 戻り値は、矩形t1, t2が交差しているとき真、でなければ偽。
     *
     * 特に、回転・拡大を利用していない、親が同じエンティティ同士の衝突判定に利用することができる。
     * 条件を満たさない場合は `withinAreas()` や、より重いが正確な `intersectEntities()` の利用を検討すること。
     *
     * @param {CommonArea} t1 矩形1
     * @param {CommonArea} t2 矩形2
     */
    function intersectAreas(t1: CommonArea, t2: CommonArea): boolean;
    /**
     * 2点間の距離による衝突判定を行い、その結果を返す。
     * 戻り値は、2点間の距離が閾値以内であるとき真、でなければ偽。
     * @param {number} t1x 一点の X 座標
     * @param {number} t1y 一点の Y 座標
     * @param {number} t2x もう一点の X 座標
     * @param {number} t2y もう一点の Y 座標
     * @param {number} [distance=1] 衝突判定閾値 [pixel]
     */
    function within(t1x: number, t1y: number, t2x: number, t2y: number, distance?: number): boolean;
    /**
     * 2つの矩形の中心座標間距離による衝突判定を行い、その結果を返す。
     * 戻り値は、2点間の距離が閾値以内であるとき真、でなければ偽。
     * @param {CommonArea} t1 矩形1
     * @param {CommonArea} t2 矩形2
     * @param {number} [distance=1] 衝突判定閾値 [pixel]
     */
    function withinAreas(t1: CommonArea, t2: CommonArea, distance?: number): boolean;
}
