import { Vec2Like } from "../math";
import { Polygon } from "./Polygon";
import { Segment } from "./Segment";
import { Circle } from "./Circle";
import { Box } from "./Box";
import { AABB } from "./AABB";
/**
 * ポリゴンのサポート関数。
 *
 * 頂点が無いポリゴンの時、原点を返す。
 *
 * @param p ポリゴン。
 * @param dir 方向ベクトル。
 * @returns dirの方向にある最も遠い頂点。
 */
export declare function supportPolygon(p: Polygon, dir: Vec2Like): Vec2Like;
/**
 * 線分のサポート関数。
 *
 * @param s: 線分。
 * @param dir 方向ベクトル。
 * @returns dirの方向にある最も遠い頂点。
 */
export declare function supportSegment(s: Segment, dir: Vec2Like): Vec2Like;
/**
 * 円のサポート関数。
 *
 * @param s: 線分。
 * @param dir 方向ベクトル。
 * @returns dirの方向にある最も遠い頂点。
 */
export declare function supportCircle(c: Circle, _dir: Vec2Like): Vec2Like;
/**
 * 点のサポート関数。
 *
 * @param v: 点の位置。
 * @param dir 方向ベクトル。
 * @returns dirの方向にある最も遠い頂点。
 */
export declare function supportVec(v: GJKShape, dir: Vec2Like): Vec2Like;
/**
 * 矩形のサポート関数。
 *
 * @param b 矩形。
 * @param dir 方向ベクトル。
 * @returns dirの方向にある最も遠い頂点。
 */
export declare function supportBox(b: Box, dir: Vec2Like): Vec2Like;
/**
 * AABBのサポート関数。
 *
 * @param aabb AABB。
 * @param dir 方向ベクトル。
 * @returns dirの方向にある最も遠い頂点。
 */
export declare function supportAABB(aabb: AABB, dir: Vec2Like): Vec2Like;
/**
 * シェイプ型。
 */
export interface GJKShape {
    /**
     * 中心座標。
     */
    position: Vec2Like;
}
/**
 * サポート関数型。
 */
export declare type SupportFn<S extends GJKShape> = (shape: S, direction: Vec2Like) => Vec2Like;
/**
 * GJKによる交差判定。
 *
 * @param s1 シェイプ1。
 * @param sup1 シェイプ1のサポート関数。
 * @param s2 シェイプ2。
 * @param sup2 シェイプ2のサポート関数。
 * @returns 交差している時、真。
 */
export declare function gjkTest<S1 extends GJKShape, S2 extends GJKShape>(s1: S1, sup1: SupportFn<S1>, s2: S2, sup2: SupportFn<S2>): boolean;
